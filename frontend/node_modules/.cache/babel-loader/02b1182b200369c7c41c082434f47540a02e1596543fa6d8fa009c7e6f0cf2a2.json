{"ast":null,"code":"var _jsxFileName = \"E:\\\\STS\\\\frontend\\\\src\\\\App.js\";\n// Example snippet for App.js\nimport { Routes, Route } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport NavBar from \"./components/NavBar\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(NavBar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Routes, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        path: \"/login\",\n        element: /*#__PURE__*/_jsxDEV(Login, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 39\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signup\",\n        element: /*#__PURE__*/_jsxDEV(Signup, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 40\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_c = App;\nexport default App; /*import React from \"react\";\n                    import { Link } from \"react-router-dom\";\n                    import NavBar from \"./components/NavBar\";\n                    export default function App() {\n                    return (\n                    <div className=\"p-4\">\n                    <NavBar />\n                    <h1 className=\"text-2xl font-bold\">Smart Task Tracker</h1>\n                    <p>Welcome! Please <Link to=\"/login\" className=\"text-blue-500\">Login</Link> or <Link to=\"/signup\" className=\"text-blue-500\">Signup</Link>.</p>\n                    </div>\n                    );\n                    }*/\n/*import React, { useEffect, useState } from \"react\";\nimport * as api from \"./api/tasks\";\nimport TaskForm from \"./components/TaskForm\";\nimport TaskList from \"./components/TaskList\";\nimport TaskFilters from \"./components/TaskFilters\";\nimport TaskSummary from \"./components/TaskSummary\";\n\nexport default function App() {\n  const [tasks, setTasks] = useState([]);\n  const [filters, setFilters] = useState({ category: \"\", status: null, priority: \"\" });\n  const [summary, setSummary] = useState({});\n\n  useEffect(() => {\n    async function loadTasks() {\n      try {\n        let data;\n        if (filters.priority) {\n          data = await api.fetchTasksByPriority(filters.priority);\n        } else if (filters.category || filters.status !== null) {\n          data = await api.fetchFilteredTasks(filters);\n        } else {\n          data = await api.fetchTasks();\n        }\n        setTasks(data);\n      } catch (err) {\n        alert(\"Error loading tasks: \" + err.message);\n        setTasks([]);\n      }\n    }\n    loadTasks();\n  }, [filters]);\n\n  useEffect(() => {\n    api.fetchTaskSummary().then(setSummary);\n  }, [tasks]);\n\n  const addTasks = async (newTasks) => {\n    const created = await api.createTasks(newTasks);\n    setTasks((prev) => [...prev, ...created]);\n  };\n\n  const updateTask = async (id, updates) => {\n    const updated = await api.updateTask(id, updates);\n    setTasks((prev) => prev.map((t) => (t.id === id ? updated : t)));\n  };\n\n  const deleteTask = async (id) => {\n    await api.deleteTask(id);\n    setTasks((prev) => prev.filter((t) => t.id !== id));\n  };\n\n  return React.createElement(\n    \"div\",\n    { style: { maxWidth: 700, margin: \"auto\", padding: 20 } },\n    React.createElement(\"h1\", null, \"Smart Task Tracker\"),\n    React.createElement(TaskSummary, { summary }),\n    React.createElement(TaskFilters, { filters, setFilters }),\n    React.createElement(TaskForm, { onAdd: addTasks }),\n    React.createElement(TaskList, { tasks, onUpdate: updateTask, onDelete: deleteTask })\n  );\n}\n*/\n/*import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const BACKEND_URL = \"http://127.0.0.1:9003\";\n\n  // State\n  const [tasks, setTasks] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"personal\");\n  const [priority, setPriority] = useState(\"Low\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [priorityFilter, setPriorityFilter] = useState(\"\");\n  const [summary, setSummary] = useState({\n    total_tasks: 0,\n    completed_tasks: 0,\n    pending_tasks: 0,\n    completion_rate_percent: 0,\n  });\n\n  // Edit state\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [editTitle, setEditTitle] = useState(\"\");\n  const [editDescription, setEditDescription] = useState(\"\");\n  const [editCategory, setEditCategory] = useState(\"personal\");\n  const [editPriority, setEditPriority] = useState(\"Low\");\n  const [editStatus, setEditStatus] = useState(false);\n\n  // Fetch tasks with filters\n  function fetchTasks() {\n    if (priorityFilter) {\n      fetch(`${BACKEND_URL}/tasks-by-priority/?priority=${priorityFilter}`)\n        .then((res) => {\n          if (!res.ok) {\n            if (res.status === 404) return [];\n            throw new Error(\"No tasks found for this priority\");\n          }\n          return res.json();\n        })\n        .then((data) => setTasks(data))\n        .catch(() => setTasks([]));\n    } else {\n      const url = new URL(`${BACKEND_URL}/filter-tasks/`);\n      if (categoryFilter) url.searchParams.append(\"category\", categoryFilter);\n      if (statusFilter !== \"\") url.searchParams.append(\"status\", statusFilter === \"true\");\n      fetch(url.toString())\n        .then((res) => (res.ok ? res.json() : []))\n        .then((data) => setTasks(data))\n        .catch(() => setTasks([]));\n    }\n  }\n\n  // Fetch summary\n  function fetchSummary() {\n    fetch(BACKEND_URL + \"/tasks-summary/\")\n      .then((res) => res.json())\n      .then((data) => setSummary(data))\n      .catch(() =>\n        setSummary({\n          total_tasks: 0,\n          completed_tasks: 0,\n          pending_tasks: 0,\n          completion_rate_percent: 0,\n        })\n      );\n  }\n\n  useEffect(() => {\n    fetchTasks();\n    fetchSummary();\n  }, [priorityFilter, categoryFilter, statusFilter]);\n\n  // Add task\n  function handleAddTask() {\n    if (title.trim() === \"\") return;\n\n    const newTask = {\n      title,\n      description,\n      category,\n      priority,\n      status: false,\n    };\n\n    fetch(BACKEND_URL + \"/tasks/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify([newTask]), // backend expects list\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error(\"Failed to create task\");\n        return res.json();\n      })\n      .then(() => {\n        setTitle(\"\");\n        setDescription(\"\");\n        setCategory(\"personal\");\n        setPriority(\"Low\");\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch((err) => alert(\"Error adding task: \" + err.message));\n  }\n\n  // Toggle complete\n  function toggleComplete(task) {\n    fetch(`${BACKEND_URL}/tasks/${task.id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...task, status: !task.status }),\n    })\n      .then(() => {\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch(() => alert(\"Failed to update task\"));\n  }\n\n  // Delete task\n  function deleteTask(taskId) {\n    fetch(`${BACKEND_URL}/tasks/${taskId}`, { method: \"DELETE\" })\n      .then(() => {\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch(() => alert(\"Failed to delete task\"));\n  }\n\n  // Start editing task\n  function startEdit(task) {\n    setEditingTaskId(task.id);\n    setEditTitle(task.title);\n    setEditDescription(task.description || \"\");\n    setEditCategory(task.category);\n    setEditPriority(task.priority);\n    setEditStatus(task.status);\n  }\n\n  // Cancel editing\n  function cancelEdit() {\n    setEditingTaskId(null);\n  }\n\n  // Submit updated task\n  function submitUpdate(taskId) {\n    const updatedTask = {\n      title: editTitle,\n      description: editDescription,\n      category: editCategory,\n      priority: editPriority,\n      status: editStatus,\n    };\n\n    fetch(`${BACKEND_URL}/tasks/${taskId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updatedTask),\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error(\"Failed to update task\");\n        return res.json();\n      })\n      .then(() => {\n        setEditingTaskId(null);\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch((err) => alert(err.message));\n  }\n\n  return React.createElement(\n    \"div\",\n    { style: { maxWidth: 700, margin: \"auto\", fontFamily: \"Arial, sans-serif\", padding: 20 } },\n\n    React.createElement(\"h2\", null, \"Smart Task Tracker\"),\n\n    // Summary\n    React.createElement(\n      \"div\",\n      {\n        style: {\n          marginBottom: 20,\n          padding: 10,\n          backgroundColor: \"#f0f0f0\",\n          borderRadius: 6,\n        },\n      },\n      React.createElement(\"div\", null, `Total Tasks: ${summary.total_tasks}`),\n      React.createElement(\"div\", null, `Completed: ${summary.completed_tasks}`),\n      React.createElement(\"div\", null, `Pending: ${summary.pending_tasks}`),\n      React.createElement(\"div\", null, `Completion Rate: ${summary.completion_rate_percent}%`)\n    ),\n\n    // Filters\n    React.createElement(\n      \"div\",\n      { style: { marginBottom: 20 } },\n\n      React.createElement(\"label\", null, \"Filter Priority: \"),\n      React.createElement(\n        \"select\",\n        {\n          value: priorityFilter,\n          onChange: (e) => setPriorityFilter(e.target.value),\n          style: { marginRight: 20 },\n        },\n        React.createElement(\"option\", { value: \"\" }, \"All\"),\n        React.createElement(\"option\", { value: \"Low\" }, \"Low\"),\n        React.createElement(\"option\", { value: \"Medium\" }, \"Medium\"),\n        React.createElement(\"option\", { value: \"High\" }, \"High\")\n      ),\n\n      React.createElement(\"label\", null, \"Filter Category: \"),\n      React.createElement(\n        \"select\",\n        {\n          value: categoryFilter,\n          onChange: (e) => setCategoryFilter(e.target.value),\n          style: { marginRight: 20 },\n        },\n        React.createElement(\"option\", { value: \"\" }, \"All\"),\n        React.createElement(\"option\", { value: \"personal\" }, \"Personal\"),\n        React.createElement(\"option\", { value: \"work\" }, \"Work\")\n      ),\n\n      React.createElement(\"label\", null, \"Filter Status: \"),\n      React.createElement(\n        \"select\",\n        {\n          value: statusFilter,\n          onChange: (e) => setStatusFilter(e.target.value),\n        },\n        React.createElement(\"option\", { value: \"\" }, \"All\"),\n        React.createElement(\"option\", { value: \"true\" }, \"Completed\"),\n        React.createElement(\"option\", { value: \"false\" }, \"Pending\")\n      )\n    ),\n\n    // Add task inputs\n    React.createElement(\n      \"div\",\n      { style: { marginBottom: 20 } },\n      React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Task title\",\n        value: title,\n        onChange: (e) => setTitle(e.target.value),\n        style: { marginRight: 10 },\n      }),\n      React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Description\",\n        value: description,\n        onChange: (e) => setDescription(e.target.value),\n        style: { marginRight: 10 },\n      }),\n      React.createElement(\n        \"select\",\n        {\n          value: category,\n          onChange: (e) => setCategory(e.target.value),\n          style: { marginRight: 10 },\n        },\n        React.createElement(\"option\", { value: \"personal\" }, \"Personal\"),\n        React.createElement(\"option\", { value: \"work\" }, \"Work\")\n      ),\n      React.createElement(\n        \"select\",\n        {\n          value: priority,\n          onChange: (e) => setPriority(e.target.value),\n          style: { marginRight: 10 },\n        },\n        React.createElement(\"option\", { value: \"Low\" }, \"Low\"),\n        React.createElement(\"option\", { value: \"Medium\" }, \"Medium\"),\n        React.createElement(\"option\", { value: \"High\" }, \"High\")\n      ),\n      React.createElement(\n        \"button\",\n        { onClick: handleAddTask },\n        \"Add Task\"\n      )\n    ),\n\n    // Tasks list with edit mode\n    ...tasks.map((task) =>\n      React.createElement(\n        \"div\",\n        {\n          key: task.id,\n          style: {\n            marginBottom: 10,\n            padding: 10,\n            backgroundColor: task.status ? \"#d4edda\" : \"#f8d7da\",\n            borderRadius: 6,\n          },\n        },\n\n        editingTaskId === task.id\n          ? React.createElement(\n              \"div\",\n              null,\n              React.createElement(\"input\", {\n                type: \"text\",\n                value: editTitle,\n                onChange: (e) => setEditTitle(e.target.value),\n                placeholder: \"Title\",\n                style: { marginRight: 10 },\n              }),\n              React.createElement(\"input\", {\n                type: \"text\",\n                value: editDescription,\n                onChange: (e) => setEditDescription(e.target.value),\n                placeholder: \"Description\",\n                style: { marginRight: 10 },\n              }),\n              React.createElement(\n                \"select\",\n                {\n                  value: editCategory,\n                  onChange: (e) => setEditCategory(e.target.value),\n                  style: { marginRight: 10 },\n                },\n                React.createElement(\"option\", { value: \"personal\" }, \"Personal\"),\n                React.createElement(\"option\", { value: \"work\" }, \"Work\")\n              ),\n              React.createElement(\n                \"select\",\n                {\n                  value: editPriority,\n                  onChange: (e) => setEditPriority(e.target.value),\n                  style: { marginRight: 10 },\n                },\n                React.createElement(\"option\", { value: \"Low\" }, \"Low\"),\n                React.createElement(\"option\", { value: \"Medium\" }, \"Medium\"),\n                React.createElement(\"option\", { value: \"High\" }, \"High\")\n              ),\n              React.createElement(\n                \"select\",\n                {\n                  value: editStatus.toString(),\n                  onChange: (e) => setEditStatus(e.target.value === \"true\"),\n                  style: { marginRight: 10 },\n                },\n                React.createElement(\"option\", { value: \"false\" }, \"Pending\"),\n                React.createElement(\"option\", { value: \"true\" }, \"Completed\")\n              ),\n              React.createElement(\n                \"button\",\n                { onClick: () => submitUpdate(task.id), style: { marginRight: 10 } },\n                \"Save\"\n              ),\n              React.createElement(\n                \"button\",\n                { onClick: cancelEdit },\n                \"Cancel\"\n              )\n            )\n          : React.createElement(\n              \"div\",\n              {\n                style: {\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                },\n              },\n              React.createElement(\n                \"div\",\n                {\n                  style: {\n                    flex: 1,\n                    textDecoration: task.status ? \"line-through\" : \"none\",\n                    marginRight: 10,\n                  },\n                },\n                `${task.title} [${task.category}] (Priority: ${task.priority})`,\n                React.createElement(\"br\"),\n                React.createElement(\"small\", null, task.description || \"\")\n              ),\n              React.createElement(\n                \"button\",\n                {\n                  onClick: () => startEdit(task),\n                  style: { marginRight: 10 },\n                },\n                \"Edit\"\n              ),\n              React.createElement(\n                \"button\",\n                {\n                  onClick: () => toggleComplete(task),\n                  style: { marginRight: 10 },\n                },\n                task.status ? \"Undo\" : \"Complete\"\n              ),\n              React.createElement(\n                \"button\",\n                {\n                  onClick: () => deleteTask(task.id),\n                  style: {\n                    backgroundColor: \"#dc3545\",\n                    color: \"white\",\n                    border: \"none\",\n                    padding: \"5px 10px\",\n                    cursor: \"pointer\",\n                  },\n                },\n                \"Delete\"\n              )\n            )\n      )\n    )\n  );\n}\n\nexport default App;*/\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Routes","Route","Login","Signup","NavBar","jsxDEV","_jsxDEV","Fragment","_Fragment","App","children","fileName","_jsxFileName","lineNumber","columnNumber","path","element","_c","$RefreshReg$"],"sources":["E:/STS/frontend/src/App.js"],"sourcesContent":["\n\n// Example snippet for App.js\nimport { Routes, Route } from \"react-router-dom\";\nimport Login from \"./components/Login\";\nimport Signup from \"./components/Signup\";\nimport NavBar from \"./components/NavBar\";\n\nfunction App() {\n  return (\n    <>\n      <NavBar />\n      <Routes>\n        <Route path=\"/login\" element={<Login />} />\n        <Route path=\"/signup\" element={<Signup />} />\n        {/* other routes */}\n      </Routes>\n    </>\n  );\n}\n\nexport default App;/*import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport NavBar from \"./components/NavBar\";\n\n\nexport default function App() {\n  return (\n    <div className=\"p-4\">\n      <NavBar />\n      <h1 className=\"text-2xl font-bold\">Smart Task Tracker</h1>\n      <p>Welcome! Please <Link to=\"/login\" className=\"text-blue-500\">Login</Link> or <Link to=\"/signup\" className=\"text-blue-500\">Signup</Link>.</p>\n    </div>\n  );\n}*/\n/*import React, { useEffect, useState } from \"react\";\nimport * as api from \"./api/tasks\";\nimport TaskForm from \"./components/TaskForm\";\nimport TaskList from \"./components/TaskList\";\nimport TaskFilters from \"./components/TaskFilters\";\nimport TaskSummary from \"./components/TaskSummary\";\n\nexport default function App() {\n  const [tasks, setTasks] = useState([]);\n  const [filters, setFilters] = useState({ category: \"\", status: null, priority: \"\" });\n  const [summary, setSummary] = useState({});\n\n  useEffect(() => {\n    async function loadTasks() {\n      try {\n        let data;\n        if (filters.priority) {\n          data = await api.fetchTasksByPriority(filters.priority);\n        } else if (filters.category || filters.status !== null) {\n          data = await api.fetchFilteredTasks(filters);\n        } else {\n          data = await api.fetchTasks();\n        }\n        setTasks(data);\n      } catch (err) {\n        alert(\"Error loading tasks: \" + err.message);\n        setTasks([]);\n      }\n    }\n    loadTasks();\n  }, [filters]);\n\n  useEffect(() => {\n    api.fetchTaskSummary().then(setSummary);\n  }, [tasks]);\n\n  const addTasks = async (newTasks) => {\n    const created = await api.createTasks(newTasks);\n    setTasks((prev) => [...prev, ...created]);\n  };\n\n  const updateTask = async (id, updates) => {\n    const updated = await api.updateTask(id, updates);\n    setTasks((prev) => prev.map((t) => (t.id === id ? updated : t)));\n  };\n\n  const deleteTask = async (id) => {\n    await api.deleteTask(id);\n    setTasks((prev) => prev.filter((t) => t.id !== id));\n  };\n\n  return React.createElement(\n    \"div\",\n    { style: { maxWidth: 700, margin: \"auto\", padding: 20 } },\n    React.createElement(\"h1\", null, \"Smart Task Tracker\"),\n    React.createElement(TaskSummary, { summary }),\n    React.createElement(TaskFilters, { filters, setFilters }),\n    React.createElement(TaskForm, { onAdd: addTasks }),\n    React.createElement(TaskList, { tasks, onUpdate: updateTask, onDelete: deleteTask })\n  );\n}\n*/\n/*import React, { useState, useEffect } from \"react\";\n\nfunction App() {\n  const BACKEND_URL = \"http://127.0.0.1:9003\";\n\n  // State\n  const [tasks, setTasks] = useState([]);\n  const [title, setTitle] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [category, setCategory] = useState(\"personal\");\n  const [priority, setPriority] = useState(\"Low\");\n  const [statusFilter, setStatusFilter] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"\");\n  const [priorityFilter, setPriorityFilter] = useState(\"\");\n  const [summary, setSummary] = useState({\n    total_tasks: 0,\n    completed_tasks: 0,\n    pending_tasks: 0,\n    completion_rate_percent: 0,\n  });\n\n  // Edit state\n  const [editingTaskId, setEditingTaskId] = useState(null);\n  const [editTitle, setEditTitle] = useState(\"\");\n  const [editDescription, setEditDescription] = useState(\"\");\n  const [editCategory, setEditCategory] = useState(\"personal\");\n  const [editPriority, setEditPriority] = useState(\"Low\");\n  const [editStatus, setEditStatus] = useState(false);\n\n  // Fetch tasks with filters\n  function fetchTasks() {\n    if (priorityFilter) {\n      fetch(`${BACKEND_URL}/tasks-by-priority/?priority=${priorityFilter}`)\n        .then((res) => {\n          if (!res.ok) {\n            if (res.status === 404) return [];\n            throw new Error(\"No tasks found for this priority\");\n          }\n          return res.json();\n        })\n        .then((data) => setTasks(data))\n        .catch(() => setTasks([]));\n    } else {\n      const url = new URL(`${BACKEND_URL}/filter-tasks/`);\n      if (categoryFilter) url.searchParams.append(\"category\", categoryFilter);\n      if (statusFilter !== \"\") url.searchParams.append(\"status\", statusFilter === \"true\");\n      fetch(url.toString())\n        .then((res) => (res.ok ? res.json() : []))\n        .then((data) => setTasks(data))\n        .catch(() => setTasks([]));\n    }\n  }\n\n  // Fetch summary\n  function fetchSummary() {\n    fetch(BACKEND_URL + \"/tasks-summary/\")\n      .then((res) => res.json())\n      .then((data) => setSummary(data))\n      .catch(() =>\n        setSummary({\n          total_tasks: 0,\n          completed_tasks: 0,\n          pending_tasks: 0,\n          completion_rate_percent: 0,\n        })\n      );\n  }\n\n  useEffect(() => {\n    fetchTasks();\n    fetchSummary();\n  }, [priorityFilter, categoryFilter, statusFilter]);\n\n  // Add task\n  function handleAddTask() {\n    if (title.trim() === \"\") return;\n\n    const newTask = {\n      title,\n      description,\n      category,\n      priority,\n      status: false,\n    };\n\n    fetch(BACKEND_URL + \"/tasks/\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify([newTask]), // backend expects list\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error(\"Failed to create task\");\n        return res.json();\n      })\n      .then(() => {\n        setTitle(\"\");\n        setDescription(\"\");\n        setCategory(\"personal\");\n        setPriority(\"Low\");\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch((err) => alert(\"Error adding task: \" + err.message));\n  }\n\n  // Toggle complete\n  function toggleComplete(task) {\n    fetch(`${BACKEND_URL}/tasks/${task.id}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ ...task, status: !task.status }),\n    })\n      .then(() => {\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch(() => alert(\"Failed to update task\"));\n  }\n\n  // Delete task\n  function deleteTask(taskId) {\n    fetch(`${BACKEND_URL}/tasks/${taskId}`, { method: \"DELETE\" })\n      .then(() => {\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch(() => alert(\"Failed to delete task\"));\n  }\n\n  // Start editing task\n  function startEdit(task) {\n    setEditingTaskId(task.id);\n    setEditTitle(task.title);\n    setEditDescription(task.description || \"\");\n    setEditCategory(task.category);\n    setEditPriority(task.priority);\n    setEditStatus(task.status);\n  }\n\n  // Cancel editing\n  function cancelEdit() {\n    setEditingTaskId(null);\n  }\n\n  // Submit updated task\n  function submitUpdate(taskId) {\n    const updatedTask = {\n      title: editTitle,\n      description: editDescription,\n      category: editCategory,\n      priority: editPriority,\n      status: editStatus,\n    };\n\n    fetch(`${BACKEND_URL}/tasks/${taskId}`, {\n      method: \"PUT\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(updatedTask),\n    })\n      .then((res) => {\n        if (!res.ok) throw new Error(\"Failed to update task\");\n        return res.json();\n      })\n      .then(() => {\n        setEditingTaskId(null);\n        fetchTasks();\n        fetchSummary();\n      })\n      .catch((err) => alert(err.message));\n  }\n\n  return React.createElement(\n    \"div\",\n    { style: { maxWidth: 700, margin: \"auto\", fontFamily: \"Arial, sans-serif\", padding: 20 } },\n\n    React.createElement(\"h2\", null, \"Smart Task Tracker\"),\n\n    // Summary\n    React.createElement(\n      \"div\",\n      {\n        style: {\n          marginBottom: 20,\n          padding: 10,\n          backgroundColor: \"#f0f0f0\",\n          borderRadius: 6,\n        },\n      },\n      React.createElement(\"div\", null, `Total Tasks: ${summary.total_tasks}`),\n      React.createElement(\"div\", null, `Completed: ${summary.completed_tasks}`),\n      React.createElement(\"div\", null, `Pending: ${summary.pending_tasks}`),\n      React.createElement(\"div\", null, `Completion Rate: ${summary.completion_rate_percent}%`)\n    ),\n\n    // Filters\n    React.createElement(\n      \"div\",\n      { style: { marginBottom: 20 } },\n\n      React.createElement(\"label\", null, \"Filter Priority: \"),\n      React.createElement(\n        \"select\",\n        {\n          value: priorityFilter,\n          onChange: (e) => setPriorityFilter(e.target.value),\n          style: { marginRight: 20 },\n        },\n        React.createElement(\"option\", { value: \"\" }, \"All\"),\n        React.createElement(\"option\", { value: \"Low\" }, \"Low\"),\n        React.createElement(\"option\", { value: \"Medium\" }, \"Medium\"),\n        React.createElement(\"option\", { value: \"High\" }, \"High\")\n      ),\n\n      React.createElement(\"label\", null, \"Filter Category: \"),\n      React.createElement(\n        \"select\",\n        {\n          value: categoryFilter,\n          onChange: (e) => setCategoryFilter(e.target.value),\n          style: { marginRight: 20 },\n        },\n        React.createElement(\"option\", { value: \"\" }, \"All\"),\n        React.createElement(\"option\", { value: \"personal\" }, \"Personal\"),\n        React.createElement(\"option\", { value: \"work\" }, \"Work\")\n      ),\n\n      React.createElement(\"label\", null, \"Filter Status: \"),\n      React.createElement(\n        \"select\",\n        {\n          value: statusFilter,\n          onChange: (e) => setStatusFilter(e.target.value),\n        },\n        React.createElement(\"option\", { value: \"\" }, \"All\"),\n        React.createElement(\"option\", { value: \"true\" }, \"Completed\"),\n        React.createElement(\"option\", { value: \"false\" }, \"Pending\")\n      )\n    ),\n\n    // Add task inputs\n    React.createElement(\n      \"div\",\n      { style: { marginBottom: 20 } },\n      React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Task title\",\n        value: title,\n        onChange: (e) => setTitle(e.target.value),\n        style: { marginRight: 10 },\n      }),\n      React.createElement(\"input\", {\n        type: \"text\",\n        placeholder: \"Description\",\n        value: description,\n        onChange: (e) => setDescription(e.target.value),\n        style: { marginRight: 10 },\n      }),\n      React.createElement(\n        \"select\",\n        {\n          value: category,\n          onChange: (e) => setCategory(e.target.value),\n          style: { marginRight: 10 },\n        },\n        React.createElement(\"option\", { value: \"personal\" }, \"Personal\"),\n        React.createElement(\"option\", { value: \"work\" }, \"Work\")\n      ),\n      React.createElement(\n        \"select\",\n        {\n          value: priority,\n          onChange: (e) => setPriority(e.target.value),\n          style: { marginRight: 10 },\n        },\n        React.createElement(\"option\", { value: \"Low\" }, \"Low\"),\n        React.createElement(\"option\", { value: \"Medium\" }, \"Medium\"),\n        React.createElement(\"option\", { value: \"High\" }, \"High\")\n      ),\n      React.createElement(\n        \"button\",\n        { onClick: handleAddTask },\n        \"Add Task\"\n      )\n    ),\n\n    // Tasks list with edit mode\n    ...tasks.map((task) =>\n      React.createElement(\n        \"div\",\n        {\n          key: task.id,\n          style: {\n            marginBottom: 10,\n            padding: 10,\n            backgroundColor: task.status ? \"#d4edda\" : \"#f8d7da\",\n            borderRadius: 6,\n          },\n        },\n\n        editingTaskId === task.id\n          ? React.createElement(\n              \"div\",\n              null,\n              React.createElement(\"input\", {\n                type: \"text\",\n                value: editTitle,\n                onChange: (e) => setEditTitle(e.target.value),\n                placeholder: \"Title\",\n                style: { marginRight: 10 },\n              }),\n              React.createElement(\"input\", {\n                type: \"text\",\n                value: editDescription,\n                onChange: (e) => setEditDescription(e.target.value),\n                placeholder: \"Description\",\n                style: { marginRight: 10 },\n              }),\n              React.createElement(\n                \"select\",\n                {\n                  value: editCategory,\n                  onChange: (e) => setEditCategory(e.target.value),\n                  style: { marginRight: 10 },\n                },\n                React.createElement(\"option\", { value: \"personal\" }, \"Personal\"),\n                React.createElement(\"option\", { value: \"work\" }, \"Work\")\n              ),\n              React.createElement(\n                \"select\",\n                {\n                  value: editPriority,\n                  onChange: (e) => setEditPriority(e.target.value),\n                  style: { marginRight: 10 },\n                },\n                React.createElement(\"option\", { value: \"Low\" }, \"Low\"),\n                React.createElement(\"option\", { value: \"Medium\" }, \"Medium\"),\n                React.createElement(\"option\", { value: \"High\" }, \"High\")\n              ),\n              React.createElement(\n                \"select\",\n                {\n                  value: editStatus.toString(),\n                  onChange: (e) => setEditStatus(e.target.value === \"true\"),\n                  style: { marginRight: 10 },\n                },\n                React.createElement(\"option\", { value: \"false\" }, \"Pending\"),\n                React.createElement(\"option\", { value: \"true\" }, \"Completed\")\n              ),\n              React.createElement(\n                \"button\",\n                { onClick: () => submitUpdate(task.id), style: { marginRight: 10 } },\n                \"Save\"\n              ),\n              React.createElement(\n                \"button\",\n                { onClick: cancelEdit },\n                \"Cancel\"\n              )\n            )\n          : React.createElement(\n              \"div\",\n              {\n                style: {\n                  display: \"flex\",\n                  justifyContent: \"space-between\",\n                  alignItems: \"center\",\n                },\n              },\n              React.createElement(\n                \"div\",\n                {\n                  style: {\n                    flex: 1,\n                    textDecoration: task.status ? \"line-through\" : \"none\",\n                    marginRight: 10,\n                  },\n                },\n                `${task.title} [${task.category}] (Priority: ${task.priority})`,\n                React.createElement(\"br\"),\n                React.createElement(\"small\", null, task.description || \"\")\n              ),\n              React.createElement(\n                \"button\",\n                {\n                  onClick: () => startEdit(task),\n                  style: { marginRight: 10 },\n                },\n                \"Edit\"\n              ),\n              React.createElement(\n                \"button\",\n                {\n                  onClick: () => toggleComplete(task),\n                  style: { marginRight: 10 },\n                },\n                task.status ? \"Undo\" : \"Complete\"\n              ),\n              React.createElement(\n                \"button\",\n                {\n                  onClick: () => deleteTask(task.id),\n                  style: {\n                    backgroundColor: \"#dc3545\",\n                    color: \"white\",\n                    border: \"none\",\n                    padding: \"5px 10px\",\n                    cursor: \"pointer\",\n                  },\n                },\n                \"Delete\"\n              )\n            )\n      )\n    )\n  );\n}\n\nexport default App;*/\n"],"mappings":";AAEA;AACA,SAASA,MAAM,EAAEC,KAAK,QAAQ,kBAAkB;AAChD,OAAOC,KAAK,MAAM,oBAAoB;AACtC,OAAOC,MAAM,MAAM,qBAAqB;AACxC,OAAOC,MAAM,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEzC,SAASC,GAAGA,CAAA,EAAG;EACb,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,gBACEJ,OAAA,CAACF,MAAM;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVR,OAAA,CAACN,MAAM;MAAAU,QAAA,gBACLJ,OAAA,CAACL,KAAK;QAACc,IAAI,EAAC,QAAQ;QAACC,OAAO,eAAEV,OAAA,CAACJ,KAAK;UAAAS,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,eAC3CR,OAAA,CAACL,KAAK;QAACc,IAAI,EAAC,SAAS;QAACC,OAAO,eAAEV,OAAA,CAACH,MAAM;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAE;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEvC,CAAC;EAAA,eACT,CAAC;AAEP;AAACG,EAAA,GAXQR,GAAG;AAaZ,eAAeA,GAAG,CAAC;AACnjaA,IAAAQ,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}